@page "/resource-search"
@using System.Collections.Generic
@using System.Linq
@inject NavigationManager NavigationManager

<h3>Resource Search</h3>

<div class="search-bar">
    <div class="search-form">
        <div class="form-group">
            <label for="resourceType">Type:</label>
            <select id="resourceType" class="form-control" @bind="@SelectedType">
                <option value="">All</option>
                <option value="Type1">Type1</option>
                <option value="Type2">Type2</option>
                <option value="Type3">Type3</option>
            </select>
        </div>

        <div class="form-group">
            <label for="category">Category:</label>
            <select id="category" class="form-control" @bind="@SelectedCategory">
                <option value="">All</option>
                @foreach (var category in Categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="title">Title:</label>
            <input type="text" id="title" class="form-control" @bind="@Title" />
        </div>

        <div class="form-group">
            <button type="button" class="btn btn-primary" @onclick="Search">Search</button>
            <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
        </div>
    </div>
</div>

@if (SearchPerformed && (SearchResults == null || !SearchResults.Any()))
{
    <p>No results found.</p>
}

<h4>Search Results:</h4>
<table class="table">
    <thead>
        <tr>
            <th>Type</th>
            <th>Category</th>
            <th>Title</th>
        </tr>
    </thead>
    <tbody>
        @if (SearchPerformed && SearchResults != null)
        {
            foreach (var result in SearchResults)
            {
                <tr>
                    <td>@result.Type</td>
                    <td>@result.Category</td>
                    <td>@result.Title</td>
                </tr>
            }
        }
        else if (!SearchPerformed && Resources != null)
        {
            foreach (var resource in Resources)
            {
                <tr>
                    <td>@resource.Type</td>
                    <td>@resource.Category</td>
                    <td>@resource.Title</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private string SelectedType { get; set; }
    private string SelectedCategory { get; set; }
    private string Title { get; set; }

    private List<Resource> Resources { get; set; }

    private bool SearchPerformed { get; set; }
    private List<Resource> SearchResults { get; set; }

    private List<string> Categories { get; set; } = new List<string>
    {
        "Category 1",
        "Category 2",
        "Category 3"
    };

    protected override void OnInitialized()
    {
        // Simulate retrieving resources from your project
        // Replace this with your actual logic to fetch resources from your data source
        Resources = GetResources();
    }

    private List<Resource> GetResources()
    {
        // Implement your logic to fetch resources from your data source
        // Return a list of resources
        return new List<Resource>
        {
            new Resource { Type = "Type1", Category = "Category 1", Title = "Resource 1" },
            new Resource { Type = "Type2", Category = "Category 1", Title = "Resource 2" },
            new Resource { Type = "Type1", Category = "Category 2", Title = "Resource 3" },
            new Resource { Type = "Type3", Category = "Category 3", Title = "Resource 4" },
            new Resource { Type = "Type2", Category = "Category 2", Title = "Resource 5" },
        };
    }

    private void Search()
    {
        // Perform the search logic and populate the SearchResults list
        // Replace this with your actual search implementation
        SearchResults = Resources.Where(r =>
            (string.IsNullOrEmpty(SelectedType) || r.Type == SelectedType) &&
            (string.IsNullOrEmpty(SelectedCategory) || r.Category == SelectedCategory) &&
            (string.IsNullOrEmpty(Title) || r.Title.Contains(Title, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        SearchPerformed = true;
    }

    private void Reset()
    {
        SelectedType = "";
        SelectedCategory = "";
        Title = "";
        SearchPerformed = false;
        SearchResults = null;
    }

    public class Resource
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string Title { get; set; }
    }
}
