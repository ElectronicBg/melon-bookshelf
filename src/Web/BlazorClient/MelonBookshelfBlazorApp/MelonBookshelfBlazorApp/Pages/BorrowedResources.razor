@page "/borrowed-resources"
@using System.Collections.Generic
@using MelonBookshelfBlazorApp.Models;
@using MelonBookshelfBlazorApp.Services.Fetchers;
@using MelonBookshelfBlazorApp.Services;
@using Newtonsoft.Json;
@inject NavigationManager _navigationManager
@inject ResourcesFetcher _resourceFetcher
@inject AuthenticationService _auth

<h3>Borrowed Resources</h3>

@if (resources != null && resources.Any())
{
	<table class="table">
		<thead>
			<tr>
				<th>Type</th>
				<th>Category</th>
				<th>Author</th>
				<th>Title</th>
				<th>Borrow Date</th>
				<th>Expected Return Date</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var resource in resources)
			{
				<tr>
					<td>@resource.Type</td>
					<td>@resource.Author</td>
					<td>@resource.Title</td>
					@* <td>
			<button class="return-button" @onclick="() => ReturnResource(resource)">Return</button>
			</td>*@
				</tr>
			}
		</tbody>
	</table>
}
else
{
	<p>No borrowed resources found.</p>
}

@code {
	private IEnumerable<Resource>? resources;

	protected override async Task OnInitializedAsync()
	{
		string token = await _auth.GetToken();

		if (string.IsNullOrEmpty(token))
		{
			_navigationManager.NavigateTo("/login");
		}
		else
		{
			_resourceFetcher.SetBearerToken(token);

			var response = await _resourceFetcher.Resources();

			var result = JsonConvert.DeserializeObject<List<Resource>>(response);

			resources = result;
		}
	}
}
