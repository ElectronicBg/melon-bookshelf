@page "/borrowed-resources"
@using System.Collections.Generic

<h3>Borrowed Resources</h3>

@if (ResourcesBorrowed != null && ResourcesBorrowed.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Type</th>
                <th>Category</th>
                <th>Author</th>
                <th>Title</th>
                <th>Borrow Date</th>
                <th>Expected Return Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in ResourcesBorrowed)
            {
                <tr>
                    <td>@resource.Type</td>
                    <td>@resource.Category</td>
                    <td>@resource.Author</td>
                    <td>@resource.Title</td>
                    <td>@resource.BorrowDate.ToShortDateString()</td>
                    <td>@resource.ExpectedReturnDate.ToShortDateString()</td>
                    <td>
                        <button class="return-button" @onclick="() => ReturnResource(resource)">Return</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No borrowed resources found.</p>
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

        .table th,
        .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        .table td:first-child {
            font-weight: bold;
        }

    p {
        margin-top: 20px;
        font-style: italic;
    }

    .return-button {
        background-color: #dc3545;
        color: #fff;
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

@code {
    private List<BorrowedResource> ResourcesBorrowed { get; set; }

    protected override void OnInitialized()
    {
        // Simulate fetching borrowed resources
        ResourcesBorrowed = new List<BorrowedResource>
        {
            new BorrowedResource
            {
                Type = "Type1",
                Category = "Category1",
                Author = "Author1",
                Title = "Title1",
                BorrowDate = DateTime.Now.AddDays(-7),
                ExpectedReturnDate = DateTime.Now.AddDays(7),
            },
            new BorrowedResource
            {
                Type = "Type2",
                Category = "Category2",
                Author = "Author2",
                Title = "Title2",
                BorrowDate = DateTime.Now.AddDays(-14),
                ExpectedReturnDate = DateTime.Now.AddDays(14),
            },
            // Add more borrowed resources as needed
        };
    }

    private void ReturnResource(BorrowedResource resource)
    {
        // Implement your logic to handle the return action for the borrowed resource
        // For example, you can remove the resource from the BorrowedResources list or perform other operations

        ResourcesBorrowed.Remove(resource);
    }

    public class BorrowedResource
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string Author { get; set; }
        public string Title { get; set; }
        public DateTime BorrowDate { get; set; }
        public DateTime ExpectedReturnDate { get; set; }
    }
}
