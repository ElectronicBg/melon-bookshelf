@page "/borrowed-resources"
@attribute [Authorize]
@using System.Collections.Generic
@using MelonBookshelfBlazorApp.Models;
@using MelonBookshelfBlazorApp.Services.Fetchers;
@using MelonBookshelfBlazorApp.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Newtonsoft.Json;
@inject NavigationManager _navigationManager
@inject ResourcesFetcher _resourceFetcher
@inject AuthenticationService _auth
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserActionsFetcher _userActionsFetcher

<h3>Borrowed Resources</h3>

@if (resources != null && resources.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Type</th>
                <th>Category</th>
                <th>Author</th>
                <th>Title</th>
                <th>Borrow Date</th>
                <th>Expected Return Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in resources)
            {
                <tr>
                    <td>@resource.Type</td>
                    <td>@resource.ResourceCategory</td>
                    <td>@resource.Author</td>
                    <td>@resource.Title</td>
                    <td>@resource.DateAdded</td>
                    <td>
                        <button class="return-button" @onclick="() => ReturnResource(resource)">Return</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No borrowed resources found.</p>
}

@code {
    private IEnumerable<Resource>? resources;

    protected override async Task OnInitializedAsync()
    {
        string token = await _auth.GetToken();

        _resourceFetcher.SetBearerToken(token);

        var uId = await AuthenticationManager.GetUserId(AuthenticationStateProvider);

        Console.WriteLine(uId);

        var response = await _resourceFetcher.PhysicalResourcesByUserId(uId);

        var result = JsonConvert.DeserializeObject<List<Resource>>(response);

        resources = result;
    }

    private async Task ReturnResource(Resource resource)
    {
        string token = await _auth.GetToken();
        string uId = await AuthenticationManager.GetUserId(AuthenticationStateProvider);

        _userActionsFetcher.SetBearerToken(token);

        await _userActionsFetcher.ReturnPhysicalResource(resource.Id, uId);

        await InvokeAsync(LoadBorrowedResources);

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadBorrowedResources()
    {
        var uId = await AuthenticationManager.GetUserId(AuthenticationStateProvider);

        var response = await _resourceFetcher.PhysicalResourcesByUserId(uId);

        var result = JsonConvert.DeserializeObject<List<Resource>>(response);

        resources = result;
    }
}
