@page "/wishlist"
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components

<h3>Wishlist</h3>

@if (Wishlist != null && Wishlist.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Category</th>
                <th>Author</th>
                <th>Title</th>
                <th>Priority</th>
                <th>Date Added</th>
                <th>Upvotes</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var wish in Wishlist)
            {
                <tr>
                    <td>@wish.Status</td>
                    <td>@wish.Category</td>
                    <td>@wish.Author</td>
                    <td>@wish.Title</td>
                    <td>@wish.Priority</td>
                    <td>@wish.DateAdded.ToShortDateString()</td>
                    <td>@wish.Upvotes</td>
                    <td>
                        @if (!wish.IsUpvoted)
                        {
                            <button class="upvote-button" @onclick="() => UpvoteWish(wish)">Upvote</button>
                        }
                        else
                        {
                            <button class="upvote-button upvoted" disabled>Upvoted</button>
                        }
                    </td>
                    <td>
                        <button class="edit-button" @onclick="() => ToggleEditMenu(wish)">Edit</button>
                        @if (showEditMenu && selectedWish == wish)
                        {
                            <div class="edit-menu-overlay">
                                <div class="edit-menu">
                                    <h4>Edit Wish</h4>
                                    <EditForm Model="@editedWish" OnValidSubmit="SaveChanges">
                                        <DataAnnotationsValidator />
                                        <div class="form-group">
                                            <label>Status</label>
                                            <InputText class="form-control" @bind-Value="@editedWish.Status" required />
                                            <ValidationMessage For="@(() => editedWish.Status)" />
                                        </div>
                                        <div class="form-group">
                                            <label>Category</label>
                                            <InputText class="form-control" @bind-Value="@editedWish.Category" required />
                                            <ValidationMessage For="@(() => editedWish.Category)" />
                                        </div>
                                        <div class="form-group">
                                            <label>Author</label>
                                            <InputText class="form-control" @bind-Value="@editedWish.Author" required />
                                            <ValidationMessage For="@(() => editedWish.Author)" />
                                        </div>
                                        <div class="form-group">
                                            <label>Title</label>
                                            <InputText class="form-control" @bind-Value="@editedWish.Title" required />
                                            <ValidationMessage For="@(() => editedWish.Title)" />
                                        </div>
                                        <div class="form-group">
                                            <label>Priority</label>
                                            <InputNumber class="form-control" @bind-Value="@editedWish.Priority" required />
                                            <ValidationMessage For="@(() => editedWish.Priority)" />
                                        </div>
                                        <div class="form-group">
                                            <label>Date Added</label>
                                            <InputDate class="form-control" @bind-Value="@editedWish.DateAdded" required />
                                            <ValidationMessage For="@(() => editedWish.DateAdded)" />
                                        </div>
                                        <div class="form-group">
                                            <label>Upvotes</label>
                                            <InputNumber class="form-control" @bind-Value="@editedWish.Upvotes" required />
                                            <ValidationMessage For="@(() => editedWish.Upvotes)" />
                                        </div>
                                        <div class="edit-menu-buttons">
                                            <button type="submit" class="btn btn-primary">Save Changes</button>
                                            <button class="cancel-button" @onclick="(e) => ToggleEditMenu(wish)">Cancel</button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        }
                    </td>
                    <td>
                        <button class="delete-button" @onclick="() => DeleteWish(wish)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="add-wish-button" @onclick="ShowAddWishModal">Add New Wish</button>

    @if (showAddWishModal)
    {
        <div class="add-wish-modal-overlay">
            <div class="add-wish-modal">
                <h4>Add New Wish</h4>
                <EditForm Model="@newWish" OnValidSubmit="SaveNewWish">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Status</label>
                        <InputText class="form-control" @bind-Value="@newWish.Status" required />
                        <ValidationMessage For="@(() => newWish.Status)" />
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <InputText class="form-control" @bind-Value="@newWish.Category" required />
                        <ValidationMessage For="@(() => newWish.Category)" />
                    </div>
                    <div class="form-group">
                        <label>Author</label>
                        <InputText class="form-control" @bind-Value="@newWish.Author" required />
                        <ValidationMessage For="@(() => newWish.Author)" />
                    </div>
                    <div class="form-group">
                        <label>Title</label>
                        <InputText class="form-control" @bind-Value="@newWish.Title" required />
                        <ValidationMessage For="@(() => newWish.Title)" />
                    </div>
                    <div class="form-group">
                        <label>Priority</label>
                        <InputNumber class="form-control" @bind-Value="@newWish.Priority" required />
                        <ValidationMessage For="@(() => newWish.Priority)" />
                    </div>
                    <div class="form-group">
                        <label>Date Added</label>
                        <InputDate class="form-control" @bind-Value="@newWish.DateAdded" required />
                        <ValidationMessage For="@(() => newWish.DateAdded)" />
                    </div>
                    <div class="form-group">
                        <label>Upvotes</label>
                        <InputNumber class="form-control" @bind-Value="@newWish.Upvotes" required />
                        <ValidationMessage For="@(() => newWish.Upvotes)" />
                    </div>
                    <div class="edit-menu-buttons">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button class="cancel-button" @onclick="HideAddWishModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
}
else
{
    <p>No wishes found.</p>
}

@code {
    private List<Wish> Wishlist { get; set; }
    private bool showEditMenu = false;
    private Wish selectedWish;
    private Wish editedWish;
    private bool showAddWishModal = false;
    private Wish newWish = new Wish();

    protected override void OnInitialized()
    {
        // Simulate fetching wishlist resources
        Wishlist = new List<Wish>
        {
            new Wish
            {
                Status = "In Progress",
                Category = "Category 1",
                Author = "Author 1",
                Title = "Title 1",
                Priority = 1,
                DateAdded = DateTime.Now.AddDays(-7),
                Upvotes = 10
            },
            new Wish
            {
                Status = "Not Started",
                Category = "Category 2",
                Author = "Author 2",
                Title = "Title 2",
                Priority = 2,
                DateAdded = DateTime.Now.AddDays(-14),
                Upvotes = 5
            },
            // Add more wishlist resources as needed
        };
    }

    private void UpvoteWish(Wish wish)
    {
        if (!wish.IsUpvoted)
        {
            wish.Upvotes++;
            wish.IsUpvoted = true;
        }
    }

    private void ToggleEditMenu(Wish wish)
    {
        showEditMenu = !showEditMenu;
        selectedWish = wish;

        if (showEditMenu)
        {
            editedWish = new Wish
            {
                Status = selectedWish.Status,
                Category = selectedWish.Category,
                Author = selectedWish.Author,
                Title = selectedWish.Title,
                Priority = selectedWish.Priority,
                DateAdded = selectedWish.DateAdded,
                Upvotes = selectedWish.Upvotes
            };
        }
        else
        {
            editedWish = null;
        }
    }

    private void SaveChanges()
    {
        var index = Wishlist.FindIndex(w => w == selectedWish);
        Wishlist[index] = editedWish;
        ToggleEditMenu(selectedWish);
    }

    private void DeleteWish(Wish wish)
    {
        Wishlist.Remove(wish);
    }

    private void ShowAddWishModal()
    {
        showAddWishModal = true;
    }

    private void HideAddWishModal()
    {
        showAddWishModal = false;
    }

    private void SaveNewWish()
    {
        Wishlist.Add(newWish);
        newWish = new Wish(); // Reset newWish object
        HideAddWishModal();
    }

    public class Wish
    {
        public string Status { get; set; }
        public string Category { get; set; }
        public string Author { get; set; }
        public string Title { get; set; }
        public int Priority { get; set; }
        public DateTime DateAdded { get; set; }
        public int Upvotes { get; set; }
        public bool IsUpvoted { get; set; }
    }
}
