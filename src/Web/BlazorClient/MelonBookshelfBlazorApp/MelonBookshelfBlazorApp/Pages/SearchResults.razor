@page "/search-results"
@using System.Collections.Generic
@inject NavigationManager NavigationManager

<h3>Search Results</h3>

@if (FilteredResources != null && FilteredResources.Any())
{
    <div class="search-results">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var resource in FilteredResources)
                {
                    <tr>
                        <td>@resource.Title</td>
                        <td>
                            <button class="preview-button" @onclick="() => ShowDetails(resource)">Preview</button>
                        </td>
                    </tr>
                    @if (resource.ShowDetails)
                    {
                        <tr>
                            <td colspan="2">
                                <div class="details">
                                    <div><strong>Type:</strong> @resource.Type</div>
                                    <div><strong>Category:</strong> @resource.Category</div>
                                    <div><strong>Author:</strong> @resource.Author</div>
                                    <div><strong>Status:</strong> @resource.Status</div>
                                    <div><strong>Date Added:</strong> @resource.DateAdded.ToShortDateString()</div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No results found.</p>
}

<style>
    .search-results {
        margin-top: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

        .table th,
        .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
            border-right: 1px solid #ddd;
        }

            .table th:first-child,
            .table td:first-child {
                font-weight: bold;
                border-left: 1px solid #ddd;
            }

        .table tr:last-child td {
            border-bottom: none;
        }

        .table tr:nth-child(odd) {
            background-color: #f6f6f6;
        }

    .preview-button {
        background-color: #007bff;
        color: #fff;
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .details {
        margin-top: 10px;
        padding: 10px;
        background-color: #f6f6f6;
    }
</style>

@code {
    private List<Resource> Resources { get; set; }
    private List<Resource> FilteredResources { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public string Category { get; set; }

    [Parameter]
    public string Title { get; set; }

    protected override void OnInitialized()
    {
        // Simulate fetching search results
        // Replace this with your actual search logic

        // Example: Assuming you have a Search method that returns a list of resources
        Resources = Search();

        FilteredResources = FilterResources();
    }

    private List<Resource> Search()
    {
        // Implement your logic to fetch search results based on the search criteria
        // Return a list of resources that match the search

        // Example: Mock search results
        return new List<Resource>
        {
            new Resource
            {
                Type = "Type1",
                Category = "Category1",
                Author = "Author1",
                Title = "Title1",
                Status = "Status1",
                DateAdded = DateTime.Now
            },
            new Resource
            {
                Type = "Type2",
                Category = "Category2",
                Author = "Author2",
                Title = "Title2",
                Status = "Status2",
                DateAdded = DateTime.Now.AddDays(-1)
            },
            // Add more search results as needed
        };
    }

    private List<Resource> FilterResources()
    {
        // Filter the resources based on the selected category
        if (!string.IsNullOrEmpty(Category))
        {
            return Resources.Where(r => r.Category == Category).ToList();
        }

        return Resources;
    }

    private void ShowDetails(Resource resource)
    {
        resource.ShowDetails = !resource.ShowDetails;
    }

    public class Resource
    {
        public string Type { get; set; }
        public string Category { get; set; }
        public string Author { get; set; }
        public string Title { get; set; }
        public string Status { get; set; }
        public DateTime DateAdded { get; set; }

        public bool ShowDetails { get; set; }
    }
}
