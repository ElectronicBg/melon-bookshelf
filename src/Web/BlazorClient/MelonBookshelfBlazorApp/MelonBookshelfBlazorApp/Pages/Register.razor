@page "/register"
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<h3>Register</h3>
<div class="registration-form">
    <div class="form-group">
        <h3>User Registration</h3>
    </div>

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <input type="text" id="firstName" class="form-control" @bind="@FirstName" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <input type="text" id="lastName" class="form-control" @bind="@LastName" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" class="form-control" @bind="@Email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" class="form-control" @bind="@Password" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <input type="password" id="confirmPassword" class="form-control" @bind="@ConfirmPassword" />
    </div>

    <div class="login-register-container">
        <button type="button" class="btn btn-login" @onclick="GoToLoginPage">Login</button>
        <button type="button" class="btn btn-register" @onclick="Registers">Register</button>
    </div>

</div>

@code {
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string Email { get; set; }
    private string Password { get; set; }
    private string ConfirmPassword { get; set; }

    private void Registers()
    {
        // Perform user registration logic here
        // Example: validate input, create user, store user in database, etc.

        // You can handle the registration success/failure as per your requirements
    }

    private void GoToLoginPage()
    {
        NavigationManager.NavigateTo("/login");
    }
}
