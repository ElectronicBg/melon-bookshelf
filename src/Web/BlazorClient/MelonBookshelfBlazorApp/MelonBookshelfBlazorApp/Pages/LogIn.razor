@page "/login"
@using MelonBookshelfBlazorApp.Models;
@using MelonBookshelfBlazorApp.Models.Results;
@using MelonBookshelfBlazorApp.Services.Fetchers;
@using MelonBookshelfBlazorApp.Services;
@using Newtonsoft.Json;
@using System.Text;
@inject AuthenticationFetcher _authenticationFetcher
@inject AuthenticationService _authenticationService

<PageTitle>LogIn</PageTitle>

<style>
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #fff;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 16px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .btn-login {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

<div class="login-container">
    <h3>Login</h3>

    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" class="form-control" @bind="loginModel.Email" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" class="form-control" @bind="loginModel.Password" />
    </div>

    <button type="button" class="btn-login" @onclick="HandleLogin">Login</button>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private LoginResult? loginResult = null;

    private async Task HandleLogin()
    {
        var jsonContent = new StringContent(JsonConvert.SerializeObject(loginModel), Encoding.UTF8, "application/json");

        var response = await _authenticationFetcher.Login(jsonContent);
        loginResult = JsonConvert.DeserializeObject<LoginResult>(response);
        
        _authenticationService.SetBearerToken(loginResult.Token);
    }
}